#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#define SIZE 11

typedef struct aluno {
    int mat;
    char nome[50];
    char curso[50];
    int disponibilidade;
}aluno;

void inicializar(char* nomeArq) {
    FILE *arq = fopen(nomeArq, "wb");
    aluno a;
    int i;
    a.disponibilidade = 1;
    for (i=0; i<SIZE; i++) {
        fwrite(&a, sizeof(aluno), 1, arq);
    }
    fclose(arq);
}

int hash(int key) {
    key = key % 1000;
    return key % SIZE;
}

int busca_pos(char* nomeArq, int matricula) {
    int pos = hash(matricula);
    aluno a;
    FILE *arq = fopen(nomeArq, "rb");
    fseek(arq, pos*sizeof(aluno), SEEK_SET);
    fread(&a, sizeof(aluno), 1, arq);
    while (a.disponibilidade == 0) {
        pos = (pos+1)%SIZE;
        fseek(arq, pos*sizeof(aluno), SEEK_SET);
        fread(&a, sizeof(aluno), 1, arq);
    }
    fclose(arq);
    return pos;
}

void inserir(char* nomeArq, aluno a) {
    int pos = busca_pos(nomeArq, a.mat);
    FILE *arq = fopen(nomeArq, "r+b");
    a.disponibilidade = 0;
    fseek(arq, pos*sizeof(aluno), SEEK_SET);
    fwrite(&a, sizeof(aluno), 1, arq);
    fclose(arq);
}

void imprime_aluno(char* nomeArq, int matricula) {
    int pos = hash(matricula);
    int aux = pos;
    aluno a;
    FILE* arq = fopen(nomeArq, "rb");
    fseek(arq, pos*sizeof(aluno), SEEK_SET);
    fread(&a, sizeof(aluno), 1, arq);
    while (a.mat != matricula && a.disponibilidade != 1) {
        pos = (pos+1)%SIZE;
        if (aux == pos) {                                      //IF de segurança para o caso da hashing possuir o máximo de elementos
            aux = -1;
            break;
        }
        fseek(arq, pos*sizeof(aluno), SEEK_SET);
        fread(&a, sizeof(aluno), 1, arq);
    }
    if (aux == -1 || a.disponibilidade==1)
        printf("\nNão foi encontrado um aluno com esta matrícula");
    else
        printf("\nNome: %s\nMatricula: %d\nCurso: %s\n", a.nome, a.mat, a.curso);

    fclose(arq);
}

void imprime_tabela(char* nomeArq) {
    FILE* arq = fopen(nomeArq, "rb");
    aluno a;
    for (int i=0; i<SIZE; i++) {
        fseek(arq, i*sizeof(aluno), SEEK_SET);
        fread(&a, sizeof(aluno), 1, arq);
        if (a.disponibilidade != 1)
            printf("[%d] ",a.mat);
        else
            printf("[         ] ");
    }
}



int main(void)
{
    setlocale(LC_ALL, "portuguese");

    char* nomeArq = "hashing.bin";

    inicializar(nomeArq);

    int opcao=0;

    while (opcao != 4) {
        printf("Escolha uma opção:\n1-Inserir um Novo Aluno\n2-Imprimir as informações de um aluno\n3-Imprimir a tabela Hash\n4-Sair\n");
        scanf("%d", &opcao);

        switch (opcao)
        {

            case 1:
                aluno a;
                printf("Informe o nome deste aluno: \n");
                scanf(" %50[^\n]", a.nome);
                printf("Informe a matrícula deste aluno (ex: 223060063): \n");
                scanf("%d", &a.mat);
                printf("Informe o curso deste aluno: \n");
                scanf(" %50[^\n]", a.curso);
                inserir(nomeArq, a);
                printf("Aluno inserido!\n\n");
                break;

            case 2:
                printf("Informe a matrícula do aluno (ex: 223060069): \n");
                int matricula;
                scanf("%d",&matricula);
                imprime_aluno(nomeArq, matricula);
            break;

            case 3:
                imprime_tabela(nomeArq);
            break;

            default: break;
        }
    }
    printf("Programa finalizado.");
}
